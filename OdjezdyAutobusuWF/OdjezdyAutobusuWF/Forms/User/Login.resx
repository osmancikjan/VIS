<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGPC/xhBQAAFA9JREFUeF7t
        3Vl2I7kVRVHPf145hZxDjcJWWGKpA8kgAs0D3j5r7V93KQo3EMzyf/78+fNfACAXAwAAEjIAACAhAwAA
        EjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAh
        AwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIA
        ACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAA
        EjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAh
        AwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIA
        ACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAA
        EjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAACAhAwAAEjIAYAN///791z///PNL
        TaV/na//PqX/HMA6DABYyM9DPkI/x0HpPzcQjwEAQUU76F/t6zAo/fcD5jIAIIjVD/xnGQQQiwEAkxwH
        4e3Qz9htDBgEMIcBAAPdDvysh/69bv+bGAMwjgEAnTn0X8sYgDEMAOjgOLxuB7/quw0BYwDaMwCgIYd+
        v9wKQFsGADTg4B+XIQBtGABQ6XboO/jndPvf3hiAOgYAvMjTfrwMAXidAQAnOfjjZwjAeQYAnODgX6vj
        z6v05wh8MgDgAU/96+Y2AB4zAKDAwb9PhgCUGQDwhYN/3wwB+M4AgA/H4aD9MwLgnQFAep768+U2AAwA
        knPw5+748y/9XEAGBgApeerXLbcBZGUAkM7xy176mRFANgYAqXjq16O8EiATA4AUXPnrbF4JkIUBwPZc
        +asmI4DdGQBszVO/ruSVADszANiSK3+1yisBdmUAsB2Hv1pnBLAjA4CtOPzVKyOA3RgAbOP45Sz1zghg
        FwYAW3D4a2RGADswAFiew18zMgJYnQHA0rzv18yOn7/SzyWswABgWQ5/RcgIYFUGAEty+CtSRgArMgBY
        jnf+ipjvBLAaA4ClOPwVOSOAlRgALMPhrxUyAliFAcASHP5aKSOAFRgAhHf8MvWlP63U8fNqBBCdAUBo
        Dn+tmhFAdAYAoTn8tXLHz2/p5xoiMAAIy+GvHTICiMoAIKTj6lTaJa8CiMgAIByHv3bMCCAaA4BwXP1r
        x7wKIBoDgFAc/to5I4BIDADCcPWvDHkVQBQGACE4/JUpI4AIDABCcPWvTHkVQAQGANM5/JUxI4DZDACm
        cvWvzHkVwEwGAFN5+lfm3AIwkwHANJ7+JbcAzGMAMIXDX/rMCGAGA4ApXP1Ln3kVwAwGAMN5+pd+5xaA
        0QwAhvP0L/3OLQCjGQAM5elfup9bAEYyABjK0790P7cAjGQAMIzDX3qeEcAoBgBDuPqXzudVACMYAAzh
        6V86n1sARjAA6M7Tv/R6bgHozQCgO0//0uu5BaA3A4CuPP1L9bkFoCcDgK48/Uv1uQWgJwOArgwAqT4D
        gJ4MALpx/S9dz2sAejEA6MbTv3Q9twD0YgDQhad/qV1uAejBAKALT/9Su9wC0IMBQHOe/qX2uQWgNQOA
        5gwAqX0GAK0ZADTn+l9qn9cAtGYA0JSnf6lfbgFoyQCgKU//Ur/cAtCSAUBTBoDULwOAlgwAmnH9L/XP
        awBaMQBoxtO/1D+3ALRiANCMASD1zwCgFQOAJlz/S+PyGoAWDACaMACkcRkAtGAA0ITrf2lcXgPQggFA
        E5LGVvocwisMAC5z/S+Nz2sArjIAuMz1vzQ+rwG4ygDgMgNAGp8BwFUGAJdJmlPp8whnGQBc4v2/NC/f
        A+AKA4BLXP9L8/IagCsMAC4xAKR5GQBcYQBwiaS5lT6XcIYBwCWS5lb6XMIZBgDVfAFQmp8vAlLLAKCa
        ASDNzwCglgFANV8AlObni4DUMgCoZgBI8zMAqGUAUE1SjEqfT3jGAKCapBiVPp/wjAFAFV8AlOLki4DU
        MACoYgBIcTIAqGEAUMUAkOJkAFDDAKCKvwEgxcnfBKCGAUAVA0CKkwFADQOAKgaAFCcDgBoGAFUMAClO
        BgA1DACqGABSnAwAahgAVJEUq9LnFB4xAKgiKValzyk8YgBQRVKsSp9TeMQAoIqkWJU+p/CIAUAVSbEq
        fU7hEQOAKpJiVfqcwiMGAFUkxar0OYVHDACqSIpV6XMKjxgAVJEUq9LnFB4xAKgiKValzyk8YgBQRVKs
        Sp9TeMQAoIqkWJU+p/CIAUAVSbEqfU7hEQOAKv7fAKU4+X8DpIYBQBUDQIqTAUANA4AqBoAUJwOAGgYA
        VQwAKU4GADUMAKoYAFKcDABqGABU+fv378evHkmzOz6Ppc8pPGIAUMUAkOJkAFDDAKCKASDFyQCghgFA
        NUkxKn0+4RkDgGqSYlT6fMIzBgDV/E0AaX7+BgC1DACqGQDS/AwAahkAVPNFQGl+vgBILQOAagaAND8D
        gFoGAJdImlvpcwlnGABcImlupc8lnGEAcIkvAkrz8gVArjAAuMQAkOZlAHCFAcAlvggozcsXALnCAOAy
        SXMqfR7hLAOAy7wGkMbn+p+rDAAuMwCk8RkAXGUAcJnvAUjj8/6fqwwAmpA0ttLnEF5hANCE1wDSuFz/
        04IBQBNeA0jjcv1PCwYATRgA0rgMAFowAGjGawCpf67/acUAoBkDQOqfAUArBgDNeA0g9c/1P60YADTl
        FkDql6d/WjIAaMoAkPplANCSAUBTXgNI/XL9T0sGAM25BZDa5+mf1gwAmnMLILXP0z+tGQA0ZwBI7TMA
        aM0AoAuvAaR2uf6nBwOALtwCSO3y9E8PBgDduAWQrufpn14MALpxCyBdz9M/vRgAdOUWQKrP0z89GQB0
        ZQBI9RkA9GQA0JXXAFJ9rv/pyQCgO7cA0ut5+qc3A4Du3AJIr+fpn94MAIZwCyCdz9M/IxgADOEWQDqf
        p39GMAAYxi2A9DxP/4xiADCUESDdz+HPSAYAQ3kVIN3P1T8jGQAM5xZA+p2nf0YzABjOLYD0O0//jGYA
        MIVbAOkzT//MYAAwhVsA6TNP/8xgADCNESA5/JnHAGAqrwKUOVf/zGQAMJVbAGXO0z8zGQBM5xZAGfP0
        z2wGACEYAcqUw58IDABC8CpAmXL1TwQGAGEYAcqQw58oDABC8SpAO+fqn0gMAMIxArRjDn+iMQAIx6sA
        7Zirf6IxAAjJCNBOOfyJyAAgLK8CtEOu/onKACA0I0Ar5/AnMgOA0I6rUyNAK3b83Lr6JzIDgPCMAK2W
        w58VGAAs4fhlKq2Sw58VGAAswwjQCjn8WYUBwFKMAEXO4c9KDACWYwQoYg5/VmMAsCRfClSkjp/H0s8p
        RGYAsCwjQBFy+LMqA4ClGQGamcOflRkALM93AjQj7/xZnQHAFowAjczhzw4MALZhBGhEDn92YQCwleOX
        s+8FqEfHz5XDn50YAGzHCFDrHP7syABgS0aAWuXwZ1cGAFszAnSl4+en9HMFOzAA2N7x9Ca9mqd+dmcA
        kIJXAjqbK3+yMABIxQjQo1z5k4kBQDpeCaiUp36yMQBIySsB3XLlT1YGAKkZAblz5U9mBgDpuQ3Il6d+
        MADgX8eBoP1z8MM7AwC+cBuwb5764TsDAAoMgX1y8EOZAQAPGALr5uCHxwwAOMEIWKvjz6v05wh8MgDg
        juPp0Q3Amt2e/t0AwH0GAPzg0N+r2xgo/VlDZgYAvLkd+g7+fbv9+RoD8M4AIDVP+zkzBMAAICFP+7p1
        +zkwBsjIACANT/t6lCFANgYA23Pw65UMAbIwANiWg19XMgTYnQHAdhz8apkhwK4MALbh4FfPDAF2YwCw
        PAe/RmYIsAsDgGU5+DUzQ4DVGQAsx8GvSBkCrMoAYBkOfkXOEGA1BgBLOH6xSitkBLAKA4DQPPVrxdwG
        sAIDgJAc/NohQ4DIDADCOX5hSjtlBBCRAUAYnvq1c24DiMYAIAQHv7J0/KyXPgMwmgHAVJ76lTG3AURg
        ADCNg1/ZcxvATAYAw3nqlz5zG8AsBgBDHb/oJP3OCGA0A4AhPPVLz3MbwEgGAN05/KXzGQGMYgDQlYNf
        quv47JQ+U9CKAUAXnvql67kNoCcDgOYc/lK7jAB6MQBo6vhFJal9RgCtGQA046lf6tvxGSt99qCGAcBl
        rvylcXklQCsGAJc4/KXxGQG0YABQ7fgFJGleRgBXGABUcfhLMTICqGUA8DJX/lKsjs9k6bMKjxgAvMTh
        L8XMCOBVBgCnHNeMDn8pdsdn1CsBzjIAeMrhL62TEcBZBgAPOfyl9TICOMMA4C6Hv7RuRgDPGAAUOfyl
        9TMCeMQA4JfjF4akfTICKDEA+MbhL+2ZEcBPBgD/cvhLe2cE8JUBwP85/KUcGQHcGAA4/KVkGQEcDIDk
        HP5SzowADIDEjl8A/qqflDN/RRADICmHvyQjIDcDICGHv6RbRkBeBkAyDn9JPzMCcjIAknH4Syp1/G4o
        /c5gXwZAIg5/SY8yAnIxAJJw+Es6kxGQhwGQgMNf0isZATkYAJs7vtgjSa/mS4H7MwA25vCXdCUjYG8G
        wKaOD66rf0lXOn6HGAH7MgA25fCX1CLfB9iXAbAhh7+klhkBezIANuPwl9QjI2A/BsBGfOlPUs98H2Av
        BsAmHP6SRmQE7MMA2ISrf0kj8ipgHwbABhz+kkZmBOzBAFicq39JM/IqYH0GwMIc/pJmZgSszQBYmKt/
        STPzKmBtBsCiHP6SImQErMsAWJCrf0mR8ipgTQbAYhz+kiJmBKzHAFiMq39JEfMqYD0GwEIc/pIiZwSs
        xQBYhKt/SSvkVcA6DIBFePqXtEJuAdZhACzA4S9ppYyANRgAwbn6l7RiXgXEZwAE5+lf0oq5BYjPAAjM
        4S9p5YyA2AyAoFz9S9ohrwLiMgCC8vQvaYfcAsRlAATk8Je0U0ZATAZAMK7+Je2YVwHxGADBePqXtGNu
        AeIxAALx9C9p59wCxGIABOLpX9LOuQWIxQAIwuEvKUNGQBwGQACu/iVlyquAGAyAADz9S8qUW4AYDIDJ
        PP1LyphbgPkMgMk8/UvKmFuA+QyAiTz9S8qcW4C5DICJPP1LypxbgLkMgEkc/pJkBMxkAEzg6l+SPvMq
        YA4DYAJP/5L0mVuAOQyAwTz9S9Lv3AKMZwAM5ulfkn7nFmA8A2AgT/+SdD+3AGMZAAN5+pek+7kFGMsA
        GMTTvyQ9zy3AOAbAIJ7+Jel5bgHGMQAG8PQvSedzCzCGATCAp39JOp9bgDEMgM48/UvS67kF6M8A6MzT
        vyS9nluA/gyAjjz9S1J9bgH6MgA68vQvSfW5BejLAOjE078kXc8tQD8GQCee/iXpem4B+jEAOjEAJOl6
        BkA/BkAHrv8lqV1eA/RhAHTg6V+S2uUWoA8DoDFP/5LUPrcA7RkAjXn6l6T2uQVozwBoyNO/JPXLLUBb
        BkBDnv4lqV9uAdoyABoyACSpXwZAWwZAI67/Jal/XgO0YwA04ulfkvrnFqAdA6ABT/+SNC63AG0YAA14
        +pekcbkFaMMAaMAAkKRxGQBtGAAXuf6XpPF5DXCdAXCRp39JGp9bgOsMgAs8/UvSvNwCXGMAXGAASNK8
        DIBrDIALXP9L0ry8BrjGAKjk6V+S5ucWoJ4BUMnTvyTNzy1APQOgkgEgSfMzAOoZABVc/0tSnLwGqGMA
        VPD0L0lxcgtQxwCoYABIUpwMgDoGwItc/0tSvLwGeJ0B8CJP/5IUL7cArzMAXmQASFK8DIDXGQAvcP0v
        SXHzGuA1BsALPP1LUtzcArzGAHiBASBJcTMAXmMAnOT6X5Li5zXAeQbASQaAJMXPADjPADjJ9b8kxc9r
        gPMMgJMkSWtU+h3ObwbACa7/JWmdvAY4xwA4wfW/JK2T1wDnGAAnGACStE4GwDkGwBOu/yVpvbwGeM4A
        eMIAkKT1MgCeMwCecP0vSevlNcBzBsATBoAkrZcB8JwB8IDrf0laN68BHjMAHjAAJGndDIDHDIAHXP9L
        0rp5DfCYAfCAASBJ62YAPGYA3OH6X5LWz2uA+wyAOwwASVo/A+A+A+AO1/+StH5eA9xnANxhAEjS+hkA
        9xkAd0iS9qj0Ox4DoMj7f0naJ98DKDMACgwASdonA6DMACjw/l+S9sn3AMoMgAIDQJL2yQAoMwAKJEl7
        Vfpdn50B8IP3/5K0X74H8JsB8IMBIEn7ZQD8ZgD84P2/JO2X7wH8ZgD8YABI0n4ZAL8ZAD9Ikvas9Ds/
        MwPgC+//JWnffA/gOwPgCwNAkvbNAPjOAPjC+39J2jffA/jOAPjCAJCkfTMAvjMAvjAAJGnfDIDvDIAv
        JEl7V/rdn5UB8MEXACVp/3wR8JMB8MEAkKT9MwA+GQAfDABJ2j8D4JMB8MEXACVp/3wR8JMB8MEAkKT9
        MwA+GQAfDABJ2j8D4JMB8EGSlKPSGZCRAfBBkpSj0hmQkQHwxt8AkKQ8+ZsA7wyANwaAJOXJAHhnALwx
        ACQpTwbAOwPgjb8BIEl58jcB3hkAbwwAScqTAfDOAHhjAEhSngyAdwbAGwNAkvJkALwzAN5IknJVOguy
        MQDeSJJyVToLsjEA3kiSclU6C7JJPwD8MwAkKV/+WQAGgAEgSQkzAAwAA0CSEmYAGAAGgCQlzAAwAPwz
        ACQpYf5ZAAaAASBJCTMADAADQJISZgD8+e//APIE16AuUR0tAAAAAElFTkSuQmCC
</value>
  </data>
</root>